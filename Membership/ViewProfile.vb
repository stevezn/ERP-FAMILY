Imports System.ComponentModel.DataAnnotations
Imports System.Drawing
Imports System.IO
Imports ActiveConnection

Partial Public Class ViewProfile

    Public Const img As String = ""

    Public Function GetCurrentAge(ByVal dob As Date) As Integer
        Dim age As Integer
        age = Today.Year - dob.Year
        If (dob > Today.AddYears(-age)) Then age -= 1
        Return age
    End Function

    Public Sub getsources()
        Dim dt As New DataTable
        dt = DB.readlocal("select a.id ,a.memberid, a.firstname AS `firstname`, a.dob, ifnull(a.lastname, '-') AS `lastname`,`a`.`phone` AS `phone`,
`a`.`email` AS `email`,ifnull(`a`.`gender`, 'Unspesified') AS `gender`,ifnull(`a`.`address1`, 'No data') as `address1`,
ifnull(`a`.`address2`, 'No data') AS `address2`,ifnull(`a`.`address3`, 'No data') AS `address3`,ifnull(`a`.`religion`, 'Unspesified') AS `religion`,
`a`.`location` AS `location`,ifnull(`a`.`idtype`, 'KTP') AS `idtype`,ifnull(`a`.`noid`, 'No data') as `noid`,`b`.`fullname` AS `fullname`,
ifnull(`a`.`remarks`, '-') AS `remarks`,ifnull(`a`.`city`,'-') AS `city` from (`t_members` `a` left join `t_user` `b` on(`a`.`createby` = `b`.`id`))
where `a`.`dob` <> '0000-00-00' and `a`.`dob` is not null and `a`.`id` <> 1 and a.memberid = '" & MemberList.getfoc & "'")
        For i As Integer = 0 To dt.Rows.Count - 1
            PictureEdit1.Image = Base64ToImage(img)
            PictureEdit2.Image = Base64ToImage(img)
            TextEdit1.Text = dt.Rows(i).Item("memberid")
            TextEdit4.Text = dt.Rows(i).Item("firstname")
            TextEdit3.Text = dt.Rows(i).Item("lastname")
            TextEdit2.Text = GetCurrentAge(dt.Rows(i).Item("dob"))
            TextEdit5.Text = dt.Rows(i).Item("gender")
            TextEdit6.Text = dt.Rows(i).Item("noid")
            TextEdit7.Text = dt.Rows(i).Item("religion")
            TextEdit8.Text = dt.Rows(i).Item("phone")
            TextEdit9.Text = dt.Rows(i).Item("email")
            TextEdit10.Text = dt.Rows(i).Item("address1")
            TextEdit12.Text = dt.Rows(i).Item("address2")
            TextEdit11.Text = dt.Rows(i).Item("address3")
            TextEdit13.Text = dt.Rows(i).Item("city")
            TextEdit14.Text = ""
            TextBox1.Text = dt.Rows(i).Item("remarks")
        Next
    End Sub

    Private Sub GetSource()
        Dim result As New List(Of MemberDetail)
        Dim jsondata As Dictionary(Of String, Object) = DB.ApiRead(DB.getlink("GetMemberDetail", MemberList.getfoc))
        For Each item In jsondata("data")
            PictureEdit1.Image = Base64ToImage(img)
            PictureEdit2.Image = Base64ToImage(img)
            TextEdit1.Text = item("memberid")
            TextEdit4.Text = item("firstname")
            TextEdit3.Text = item("lastname")
            TextEdit2.Text = GetCurrentAge(item("dob"))
            TextEdit5.Text = item("gender")
            TextEdit6.Text = item("noid")
            TextEdit7.Text = item("religion")
            TextEdit8.Text = item("phone")
            TextEdit9.Text = item("email")
            TextEdit10.Text = item("address1")
            TextEdit12.Text = item("address2")
            TextEdit11.Text = item("address3")
            TextEdit13.Text = item("city")
            TextEdit14.Text = ""
            TextBox1.Text = item("remarks")
        Next
    End Sub

    Public Sub New()
        InitializeComponent()
        'DataLayoutControl1.DataSource = GetSource()
        'DataLayoutControl1.RetrieveFields()
        'Dim flatList As List(Of BaseLayoutItem) = (New FlatItemsList()).GetItemsList(DataLayoutControl1.Root)
        'Dim aboutItem As BaseLayoutItem = flatList.First(Function(e) e.Text = "About")
        'aboutItem.TextLocation = DevExpress.Utils.Locations.Top
    End Sub

    Public Shared Function Base64ToImage(ByVal base64Image As String) As Image
        Using ms As New MemoryStream(Convert.FromBase64String(base64Image))
            Dim image As Image = Image.FromStream(ms, True)
            Return image
        End Using
    End Function

    Public Class MemberDetail
        Private Const RootGroup As String = "<Root>"
        Private Const Photo As String = RootGroup & "/" & "<Photo->"
        Private Const FirstNameAndLastName As String = Photo & "/" & "<FirstAndLastName>"
        Private Const TabbedGroup As String = FirstNameAndLastName & "/" & "{Tabs}"
        Private Const ContactGroup As String = TabbedGroup & "/" & "Contact"
        Private Const BDateAndGender As String = ContactGroup & "/" & "<BDateAndGender->"
        Private Const HomeAddressAndPhone As String = ContactGroup & "/" & "<HomeAddressAndPhone->"
        Private Const JobGroup As String = TabbedGroup & "/" & "Misscellaneous"
        Private Const TransactGroup As String = TabbedGroup & "/" & "/" & "{Tabs}"
        Private Const HDateAndSalary As String = JobGroup & "/" & "<HDateAndSalary->"
        Private Const EmailAndSkype As String = JobGroup & "/" & "<EmailAndSkype->"
        Private Const GroupAndTitle As String = JobGroup & "/" & "<GroupAndTitle->"

        <Key, Display(AutoGenerateField:=False)>
        Public Property ID() As String
        <Display(Name:="Member ID", GroupName:=FirstNameAndLastName, Order:=1)>
        Public Property MemberID() As String
        <Display(Name:="Last name", GroupName:=FirstNameAndLastName, Order:=3)>
        Public Property LastName() As String
        <Display(Name:="First name", GroupName:=FirstNameAndLastName, Order:=2)>
        Public Property FirstName() As String
        <Display(Name:="ID Type", GroupName:=FirstNameAndLastName)>
        Public Property IdType() As String
        <Display(Name:="No ID", GroupName:=FirstNameAndLastName)>
        Public Property Noid() As String
        <Display(Name:="Created By", GroupName:=FirstNameAndLastName, Order:=6)>
        Public Property CreatedBy As String
        <Display(Name:="", GroupName:=Photo, Order:=0)>
        Public Property Image() As Image
        <Display(Name:="", GroupName:=Photo, Order:=0)>
        Public Property Image1() As Image
        <Display(Name:="Phone", GroupName:=HomeAddressAndPhone, Order:=1)>
        Public Property Phone() As String
        <Display(Name:="E-Mail", GroupName:=EmailAndSkype, Order:=5)>
        Public Property Email() As String
        <Display(Name:="Religion", GroupName:=EmailAndSkype)>
        Public Property Religion() As String
        <Display(Name:="Address", GroupName:=HomeAddressAndPhone, Order:=5)>
        Public Property AddressLine1() As String
        <Display(Name:="Address", GroupName:=HomeAddressAndPhone)>
        Public Property AddressLine2() As String
        <Display(Name:="Address", GroupName:=HomeAddressAndPhone)>
        Public Property AddressLine3 As String
        <Display(Name:="About", GroupName:=RootGroup), DataType(DataType.MultilineText)>
        Public Property Description() As String
        <Range(GetType(Date), "1/1/1900", "1/1/2010", ErrorMessage:="Birthday is out of Range"), Display(Name:="Birthday", GroupName:=BDateAndGender, Order:=3)>
        Public Property BirthDate() As Date
        <Display(Name:="Gender", GroupName:=BDateAndGender)>
        Public Property Gender() As String
        <Display(Name:="Group", GroupName:=GroupAndTitle, Order:=6)>
        Public Property Group() As String
        <Display(Name:="Join date", GroupName:=HDateAndSalary, Order:=4)>
        Public Property HireDate() As Date
        <Display(Name:="Location", GroupName:=HDateAndSalary)>
        Public Property Location() As String
        '<Display(Name:="Title", GroupName:=GroupAndTitle)>
        'Public Property Title() As String
    End Class

    Private Sub ViewProfile_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        mainRibbonControl.Minimized = True
        getsources()
    End Sub
End Class